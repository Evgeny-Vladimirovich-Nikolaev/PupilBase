
package pupilbase.mainframe;

import presentations.ListStart;

import javax.swing.filechooser.FileFilter;
import java.io.*;
import java.nio.file.Paths;


class PupilBaseFilter extends FileFilter{
    
    private static final String FILE_EXTENSION = ".ppb";
    private static final String DESCRIPTION = "файлы Pupil Base";
    
    @Override
    public boolean accept (File file){
        if(file.getName().endsWith(FILE_EXTENSION))return true;
        return file.isDirectory();
    }

    @Override
    public String getDescription() {
        return (DESCRIPTION);
    }
    

}

/**
 *
 * @author Nobilis
 */
public class Open extends javax.swing.JFrame {
    
    
    private static final String PUPIL_BASE_FOLDER = "\\Pupil Base";
    private static final String CONFIG = "\\config";
    private static final String FILE_FORMAT_ERROR = "Неправильный формат файла";
    private static String userAppDirectory;
    private File currentFile;
    private File config;

    /**
     * Creates new form Open
     */
    public Open() {
        initComponents();
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        
        config = getConfig();
        File baseDir = readDirFromConfig();
         
        if(baseDir != null && baseDir.exists()) {
            jFileChooser = new javax.swing.JFileChooser(baseDir);
        } else {
            jFileChooser = new javax.swing.JFileChooser();
            new File(userAppDirectory).mkdirs();
       }
        
        jFileChooser.setFileFilter(new PupilBaseFilter());
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModalExclusionType(null);

        jFileChooser.addActionListener(this::jFileChooserActionPerformed);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }
    
    private File getConfig() {        
        javax.swing.JFileChooser tempChooser = new javax.swing.JFileChooser();
        userAppDirectory = tempChooser.getFileSystemView().getDefaultDirectory()
                + PUPIL_BASE_FOLDER;
        return Paths.get(userAppDirectory + CONFIG).toFile();
    }
    
    private File readDirFromConfig(){
        try(BufferedReader br = new BufferedReader (new FileReader(config)))
        {
            StringBuilder dir  = new StringBuilder();
            int ch;
            while((ch=br.read())!= -1)
            {
                dir.append((char)ch);
            }
            return new File(dir.toString());
        } catch(IOException ex) {
            System.out.println(ex.getMessage());
        }
        return null;
    }
    
    private void writeDirToConfig(){
        try (BufferedWriter eraser = 
                new BufferedWriter(new java.io.FileWriter(config, false))) {
                eraser.write(currentFile.getParent());
                eraser.flush();
                eraser.close();
            }catch(IOException e){
           e.printStackTrace();}   
    }

    private void jFileChooserActionPerformed(java.awt.event.ActionEvent evt) {                                              
        try {
            this.setEnabled(true);
            currentFile = jFileChooser.getSelectedFile();
            ListStart list = new ListStart(currentFile);
            list.setBounds(215, 100, 850, 672);
            list.setVisible(true);
            writeDirToConfig();
            this.dispose();
            } catch (NullPointerException e) {
            this.dispose();
            } catch (NumberFormatException e) {
            System.out.println(FILE_FORMAT_ERROR);
            }
    }                                             

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Open.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Open.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Open.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Open.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Open().setVisible(true);
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JFileChooser jFileChooser;
    // End of variables declaration                   
}
